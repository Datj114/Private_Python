# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vnvIj-r_Koy9eL6Ph7Wh1FxoUCRq4RRb
"""

# bai1
days, month, year = map(int, input().split("/"))

for i in range(1, month):
    if i in [4, 6, 9, 11]:
        days += 30
    elif i == 2:

        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            days += 29
        else:
            days += 28
    else:
        days += 31

if(year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    days = 366 - days+1
else:
    days=365-days+1
print(days)

#bai2
# Bai 2
n = int(input())
li = list(map(int, input().split(" ")))
a = []
count=0
for i in li:
    if i % 2 == 1:
        a.append(i)
        count+=1

print(count)
a.sort()
print(a)

#bai3
import re

str = input("Nhập chuỗi số: ")

list = re.findall(r'-?\d+', str)
 # \d+ <=> \d{1,} : tìm những số có từ 1 chữ số
total = 0
for number in list:
    total+=int(number)

print("Tổng các số trong chuỗi là:", total)

#bai4
n=int(input())
a=list(map(int,input().split()))
x=0
for i in a:
  x+= i if i%2==0 else -i
if x>0:
  print("even")
elif  x==0:
  print("equal")
else:
   print("odd")

#bai 5
array=[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]
#hàm isinstance()

results = []
for i in range(len(array)):
  if isinstance(array[i], list):
    for j in range(len(array[i])):
      results.append(array[i][j])
  else:
    results.append(array[i])
print(results)

# Kiểm tra xem một đối tượng có phải là một thể hiện của một lớp cụ thể
isinstance(10, int)  # True
isinstance('hello', str)  # True

# Kiểm tra xem một đối tượng có phải là một thể hiện của bất kỳ lớp nào trong một tập hợp các lớp
isinstance('hello', (str, tuple))  # True
isinstance(10, (int, float))  # True

# Kiểm tra xem một đối tượng không phải là một thể hiện của một lớp cụ thể
isinstance(10, str)  # False
isinstance('hello', int)  # False

#bai 6
from itertools import groupby

def nhom_gia_tri_giong_nhau(lst):
    lst.sort()

    grouped_values = [list(group) for key, group in groupby(lst)]

    return grouped_values

my_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
res = nhom_gia_tri_giong_nhau(my_list)

print(res)

#7
list1 = 'a b c d e f'.split()
so_nhom = 3

res = []
for i in range(so_nhom):
    sub_res = list1[i::so_nhom]
    res.append(sub_res)

print(res)

#bai8
import os

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def right_input(prompt):
    while True:
        try:
            number = int(input(prompt))
            return number
        except ValueError:
            print("Vui lòng nhập một số nguyên dương.")

def play_game():
    highest_point = 0
    winner = None
    highest_round_win = []

    while True:
        n = right_input("Nhập số nguyên dương n: ")
        k = right_input("Nhập số nguyên dương k (0 < k < n): ")
        current_point = 0
        round_win = []

        while n > 0:
            print(f"\nTurn của người chơi (n={n}):")
            choice = right_input(f"Nhập một số từ 1 đến {min(n, k)}: ")

            if choice < 1 or choice > min(n, k):
                print("Người chơi đã phạm luật!")
                current_point += 1
            else:
                n -= choice
                round_win.append(choice)

        print("\nRound kết thúc!")
        print("Người chơi thắng: ", round_win)
        print("Số điểm phạm luật: ", current_point)

        if current_point < highest_point or winner is None:
            highest_point = current_point
            winner = highest_round_win
        elif current_point == highest_point:
            if len(round_win) > len(highest_round_win):
                winner = highest_round_win
            elif len(round_win) == len(highest_round_win):
                print("\nHai người chơi hoà!")
                break
            else:
                winner = round_win

        highest_round_win = round_win
        tiep_tuc = input("Tiếp tục chơi? (YES/NO): ").upper()

        if tiep_tuc != 'YES':
            break
        else:
            clear_screen()

    print("\nTrò chơi kết thúc!")
    print("Người chơi thắng cuộc: ", winner)

if __name__ == "__main__":
    play_game()